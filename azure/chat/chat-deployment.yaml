apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: microk8s-hostpath
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: chat-nginx-conf
  namespace: default
data:
  default.conf: |
    server {
        listen       90;
        listen  [::]:90;
        server_name  localhost;
        error_log  /var/log/nginx/error.log debug;
        access_log /var/log/nginx/access.log;
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
        }
        location /ws {
            proxy_pass http://chat-backend.default.svc.cluster.local:88/chat;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
            add_header X-Proxy-Target http://chat-backend.default.svc.cluster.local:88/chat always;
            add_header X-Request-URI $request_uri always;
            add_header X-WebSocket-Status $http_upgrade always;
        }
        location /api {
            proxy_pass http://chat-backend.default.svc.cluster.local:88/api;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
            add_header X-Proxy-Target http://chat-backend.default.svc.cluster.local:88/api always;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-backend
  namespace: default
spec:
  replicas: 4
  selector:
    matchLabels:
      app: chat-backend
  template:
    metadata:
      labels:
        app: chat-backend
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - chat-backend
              topologyKey: kubernetes.io/hostname
      containers:
      - name: tomcat
        image: localhost:32000/chat-backend:latest
        ports:
        - containerPort: 88
        env:
        - name: MONGO_URI
          value: "mongodb://mongodb-service:27017/chatapp"
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: chat-backend
  namespace: default
spec:
  selector:
    app: chat-backend
  ports:
  - protocol: TCP
    port: 88
    targetPort: 88
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: chat-ws-lb
  namespace: default
spec:
  type: LoadBalancer
  selector:
    app: chat-backend
  ports:
  - protocol: TCP
    port: 88
    targetPort: 88
    nodePort: 88
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-frontend
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chat-frontend
  template:
    metadata:
      labels:
        app: chat-frontend
    spec:
      containers:
      - name: chat-frontend
        image: localhost:32000/chat-frontend:latest
        ports:
        - containerPort: 90
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/
        env:
        - name: WS_URL
          value: "ws://localhost/ws"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: nginx-config
        configMap:
          name: chat-nginx-conf
---
apiVersion: v1
kind: Service
metadata:
  name: chat-frontend
  namespace: default
spec:
  selector:
    app: chat-frontend
  ports:
  - protocol: TCP
    port: 90
    targetPort: 90
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: chat-frontend-lb
  namespace: default
spec:
  type: LoadBalancer
  selector:
    app: chat-frontend
  ports:
  - protocol: TCP
    port: 90
    targetPort: 90
    nodePort: 90
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: localhost:32000/mongo:latest
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: default
spec:
  selector:
    app: mongodb
  ports:
  - protocol: TCP
    port: 27017
    targetPort: 27017
  type: ClusterIP
