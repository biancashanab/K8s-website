./cms/cms-deployment.yaml: apiVersion: v1
./cms/cms-deployment.yaml: kind: PersistentVolumeClaim
./cms/cms-deployment.yaml: metadata:
./cms/cms-deployment.yaml:   name: cms-db-pvc
./cms/cms-deployment.yaml:   namespace: default
./cms/cms-deployment.yaml: spec:
./cms/cms-deployment.yaml:   storageClassName: microk8s-hostpath
./cms/cms-deployment.yaml:   accessModes:
./cms/cms-deployment.yaml:     - ReadWriteOnce
./cms/cms-deployment.yaml:   resources:
./cms/cms-deployment.yaml:     requests:
./cms/cms-deployment.yaml:       storage: 1Gi
./cms/cms-deployment.yaml: apiVersion: apps/v1
./cms/cms-deployment.yaml: kind: Deployment
./cms/cms-deployment.yaml: metadata:
./cms/cms-deployment.yaml:   name: cms-deployment
./cms/cms-deployment.yaml:   namespace: default
./cms/cms-deployment.yaml: spec:
./cms/cms-deployment.yaml:   replicas: 4
./cms/cms-deployment.yaml:   selector:
./cms/cms-deployment.yaml:     matchLabels:
./cms/cms-deployment.yaml:       app: cms
./cms/cms-deployment.yaml:   template:
./cms/cms-deployment.yaml:     metadata:
./cms/cms-deployment.yaml:       labels:
./cms/cms-deployment.yaml:         app: cms
./cms/cms-deployment.yaml:     spec:
./cms/cms-deployment.yaml:       affinity:
./cms/cms-deployment.yaml:         podAntiAffinity:
./cms/cms-deployment.yaml:           preferredDuringSchedulingIgnoredDuringExecution:
./cms/cms-deployment.yaml:           - weight: 100
./cms/cms-deployment.yaml:             podAffinityTerm:
./cms/cms-deployment.yaml:               labelSelector:
./cms/cms-deployment.yaml:                 matchExpressions:
./cms/cms-deployment.yaml:                 - key: app
./cms/cms-deployment.yaml:                   operator: In
./cms/cms-deployment.yaml:                   values:
./cms/cms-deployment.yaml:                   - cms
./cms/cms-deployment.yaml:               topologyKey: kubernetes.io/hostname
./cms/cms-deployment.yaml:       containers:
./cms/cms-deployment.yaml:       - name: cms
./cms/cms-deployment.yaml:         image: localhost:32000/vvveb-cms:latest
./cms/cms-deployment.yaml:         resources:
./cms/cms-deployment.yaml:           limits:
./cms/cms-deployment.yaml:             memory: "256Mi"
./cms/cms-deployment.yaml:             cpu: "200m"
./cms/cms-deployment.yaml:           requests:
./cms/cms-deployment.yaml:             memory: "128Mi"
./cms/cms-deployment.yaml:             cpu: "100m"
./cms/cms-deployment.yaml:         ports:
./cms/cms-deployment.yaml:         - containerPort: 80
./cms/cms-deployment.yaml:         env:
./cms/cms-deployment.yaml:         - name: DB_HOST
./cms/cms-deployment.yaml:           value: "cms-db-service"
./cms/cms-deployment.yaml:         - name: DB_DATABASE
./cms/cms-deployment.yaml:           value: "vvveb"
./cms/cms-deployment.yaml:         - name: DB_USER
./cms/cms-deployment.yaml:           value: "vvveb"
./cms/cms-deployment.yaml:         - name: DB_PASSWORD
./cms/cms-deployment.yaml:           value: "vvveb"
./cms/cms-deployment.yaml:         - name: DB_ENGINE
./cms/cms-deployment.yaml:           value: "mysqli"
./cms/cms-deployment.yaml: apiVersion: v1
./cms/cms-deployment.yaml: kind: Service
./cms/cms-deployment.yaml: metadata:
./cms/cms-deployment.yaml:   name: cms-service
./cms/cms-deployment.yaml:   namespace: default
./cms/cms-deployment.yaml: spec:
./cms/cms-deployment.yaml:   selector:
./cms/cms-deployment.yaml:     app: cms
./cms/cms-deployment.yaml:   ports:
./cms/cms-deployment.yaml:   - protocol: TCP
./cms/cms-deployment.yaml:     port: 80
./cms/cms-deployment.yaml:     targetPort: 80
./cms/cms-deployment.yaml:   type: ClusterIP
./cms/cms-deployment.yaml: apiVersion: apps/v1
./cms/cms-deployment.yaml: kind: Deployment
./cms/cms-deployment.yaml: metadata:
./cms/cms-deployment.yaml:   name: cms-db-deployment
./cms/cms-deployment.yaml:   namespace: default
./cms/cms-deployment.yaml: spec:
./cms/cms-deployment.yaml:   replicas: 1
./cms/cms-deployment.yaml:   selector:
./cms/cms-deployment.yaml:     matchLabels:
./cms/cms-deployment.yaml:       app: cms-db
./cms/cms-deployment.yaml:   template:
./cms/cms-deployment.yaml:     metadata:
./cms/cms-deployment.yaml:       labels:
./cms/cms-deployment.yaml:         app: cms-db
./cms/cms-deployment.yaml:     spec:
./cms/cms-deployment.yaml:       containers:
./cms/cms-deployment.yaml:       - name: mysql
./cms/cms-deployment.yaml:         image: localhost:32000/mysql:latest
./cms/cms-deployment.yaml:         resources:
./cms/cms-deployment.yaml:           limits:
./cms/cms-deployment.yaml:             memory: "512Mi"
./cms/cms-deployment.yaml:             cpu: "500m"
./cms/cms-deployment.yaml:           requests:
./cms/cms-deployment.yaml:             memory: "256Mi"
./cms/cms-deployment.yaml:             cpu: "250m"
./cms/cms-deployment.yaml:         ports:
./cms/cms-deployment.yaml:         - containerPort: 3306
./cms/cms-deployment.yaml:         env:
./cms/cms-deployment.yaml:         - name: MYSQL_ROOT_PASSWORD
./cms/cms-deployment.yaml:           value: "vvveb"
./cms/cms-deployment.yaml:         - name: MYSQL_DATABASE
./cms/cms-deployment.yaml:           value: "vvveb"
./cms/cms-deployment.yaml:         - name: MYSQL_USER
./cms/cms-deployment.yaml:           value: "vvveb"
./cms/cms-deployment.yaml:         - name: MYSQL_PASSWORD
./cms/cms-deployment.yaml:           value: "vvveb"
./cms/cms-deployment.yaml:         volumeMounts:
./cms/cms-deployment.yaml:         - mountPath: "/var/lib/mysql"
./cms/cms-deployment.yaml:           name: cms-db-storage
./cms/cms-deployment.yaml:       volumes:
./cms/cms-deployment.yaml:       - name: cms-db-storage
./cms/cms-deployment.yaml:         persistentVolumeClaim:
./cms/cms-deployment.yaml:           claimName: cms-db-pvc
./cms/cms-deployment.yaml: apiVersion: v1
./cms/cms-deployment.yaml: kind: Service
./cms/cms-deployment.yaml: metadata:
./cms/cms-deployment.yaml:   name: cms-db-service
./cms/cms-deployment.yaml:   namespace: default
./cms/cms-deployment.yaml: spec:
./cms/cms-deployment.yaml:   selector:
./cms/cms-deployment.yaml:     app: cms-db
./cms/cms-deployment.yaml:   ports:
./cms/cms-deployment.yaml:   - protocol: TCP
./cms/cms-deployment.yaml:     port: 3306
./cms/cms-deployment.yaml:     targetPort: 3306
./cms/cms-deployment.yaml:   type: ClusterIP
./cms/cms-deployment.yaml: apiVersion: v1
./cms/cms-deployment.yaml: kind: Service
./cms/cms-deployment.yaml: metadata:
./cms/cms-deployment.yaml:   name: cms-lb
./cms/cms-deployment.yaml:   namespace: default
./cms/cms-deployment.yaml: spec:
./cms/cms-deployment.yaml:   type: LoadBalancer
./cms/cms-deployment.yaml:   selector:
./cms/cms-deployment.yaml:     app: cms
./cms/cms-deployment.yaml:   ports:
./cms/cms-deployment.yaml:   - protocol: TCP
./cms/cms-deployment.yaml:     port: 80
./cms/cms-deployment.yaml:     targetPort: 80
./cms/cms-deployment.yaml:     nodePort: 80
./azure-secret.yaml: apiVersion: v1
./azure-secret.yaml: kind: Secret
./azure-secret.yaml: metadata:
./azure-secret.yaml:   name: azure-secret
./azure-secret.yaml: type: Opaque
./azure-secret.yaml: stringData:
./azure-secret.yaml:   AZURE_STORAGE_CONNECTION_STRING: "DefaultEndpointsProtocol=https;AccountName=mystorageaccount;AccountKey=mykey;EndpointSuffix=core.windows.net"
./azure-secret.yaml:   AZURE_SQL_CONNECTION_STRING: "Server=tcp:myserver.database.windows.net,1433;Initial Catalog=mydb;Persist Security Info=False;User ID=myadmin;Password=mypassword;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
./azure-secret.yaml:   AZURE_ENTITY_EXTRACTION_KEY: "my-entity-extraction-key"
./azure-secret.yaml:   AZURE_ENTITY_EXTRACTION_ENDPOINT: "https://my-entity-extraction.cognitiveservices.azure.com/"
./chat/chat-deployment.yaml: apiVersion: v1
./chat/chat-deployment.yaml: kind: ConfigMap
./chat/chat-deployment.yaml: metadata:
./chat/chat-deployment.yaml:   name: chat-frontend-env
./chat/chat-deployment.yaml:   namespace: default
./chat/chat-deployment.yaml: data:
./chat/chat-deployment.yaml:   environment.prod.js: |
./chat/chat-deployment.yaml:     window.environment = {
./chat/chat-deployment.yaml:       production: true,
./chat/chat-deployment.yaml:       apiUrl: '/api',
./chat/chat-deployment.yaml:       wsUrl: 'ws://' + window.location.host + '/ws'
./chat/chat-deployment.yaml:     };
./chat/chat-deployment.yaml: apiVersion: v1
./chat/chat-deployment.yaml: kind: ConfigMap
./chat/chat-deployment.yaml: metadata:
./chat/chat-deployment.yaml:   name: chat-nginx-conf
./chat/chat-deployment.yaml:   namespace: default
./chat/chat-deployment.yaml: data:
./chat/chat-deployment.yaml:   default.conf: |
./chat/chat-deployment.yaml:     server {
./chat/chat-deployment.yaml:         listen       90;
./chat/chat-deployment.yaml:         listen  [::]:90;
./chat/chat-deployment.yaml:         server_name  localhost;
./chat/chat-deployment.yaml:         error_log  /var/log/nginx/error.log debug;
./chat/chat-deployment.yaml:         access_log /var/log/nginx/access.log;
./chat/chat-deployment.yaml:         
./chat/chat-deployment.yaml:         # Add CORS headers for all responses
./chat/chat-deployment.yaml:         add_header 'Access-Control-Allow-Origin' '*' always;
./chat/chat-deployment.yaml:         add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
./chat/chat-deployment.yaml:         add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
./chat/chat-deployment.yaml:         
./chat/chat-deployment.yaml:         location / {
./chat/chat-deployment.yaml:             root   /usr/share/nginx/html;
./chat/chat-deployment.yaml:             index  index.html index.htm;
./chat/chat-deployment.yaml:             try_files $uri $uri/ /index.html;
./chat/chat-deployment.yaml:         }
./chat/chat-deployment.yaml:         
./chat/chat-deployment.yaml:         # Create a specific location that matches EXACTLY what the client is requesting
./chat/chat-deployment.yaml:         location = /ws {
./chat/chat-deployment.yaml:             proxy_pass http://chat-backend.default.svc.cluster.local:88/chat;
./chat/chat-deployment.yaml:             proxy_http_version 1.1;
./chat/chat-deployment.yaml:             proxy_set_header Upgrade $http_upgrade;
./chat/chat-deployment.yaml:             proxy_set_header Connection "upgrade";
./chat/chat-deployment.yaml:             proxy_set_header Host $host;
./chat/chat-deployment.yaml:             proxy_set_header X-Real-IP $remote_addr;
./chat/chat-deployment.yaml:             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
./chat/chat-deployment.yaml:             proxy_set_header X-Forwarded-Proto $scheme;
./chat/chat-deployment.yaml:             proxy_cache_bypass $http_upgrade;
./chat/chat-deployment.yaml:             proxy_connect_timeout 86400s;
./chat/chat-deployment.yaml:             proxy_send_timeout 86400s;
./chat/chat-deployment.yaml:             proxy_read_timeout 86400s;
./chat/chat-deployment.yaml:             
./chat/chat-deployment.yaml:             # Debug headers
./chat/chat-deployment.yaml:             add_header X-Debug-Target "http://chat-backend.default.svc.cluster.local:88/chat" always;
./chat/chat-deployment.yaml:             add_header X-Debug-Original-URI $request_uri always;
./chat/chat-deployment.yaml:         }
./chat/chat-deployment.yaml:         
./chat/chat-deployment.yaml:         error_page   500 502 503 504  /50x.html;
./chat/chat-deployment.yaml:         location = /50x.html {
./chat/chat-deployment.yaml:             root   /usr/share/nginx/html;
./chat/chat-deployment.yaml:         }
./chat/chat-deployment.yaml:     }
./chat/chat-deployment.yaml: apiVersion: apps/v1
./chat/chat-deployment.yaml: kind: Deployment
./chat/chat-deployment.yaml: metadata:
./chat/chat-deployment.yaml:   name: chat-backend
./chat/chat-deployment.yaml:   namespace: default
./chat/chat-deployment.yaml: spec:
./chat/chat-deployment.yaml:   replicas: 3
./chat/chat-deployment.yaml:   selector:
./chat/chat-deployment.yaml:     matchLabels:
./chat/chat-deployment.yaml:       app: chat-backend
./chat/chat-deployment.yaml:   template:
./chat/chat-deployment.yaml:     metadata:
./chat/chat-deployment.yaml:       labels:
./chat/chat-deployment.yaml:         app: chat-backend
./chat/chat-deployment.yaml:     spec:
./chat/chat-deployment.yaml:       containers:
./chat/chat-deployment.yaml:       - name: tomcat
./chat/chat-deployment.yaml:         image: localhost:32000/chat-backend:latest  # Use your registry address
./chat/chat-deployment.yaml:         env:
./chat/chat-deployment.yaml:         - name: DB_HOST
./chat/chat-deployment.yaml:           value: chat-db
./chat/chat-deployment.yaml:         - name: DB_NAME
./chat/chat-deployment.yaml:           valueFrom:
./chat/chat-deployment.yaml:             secretKeyRef:
./chat/chat-deployment.yaml:               name: chat-db-secret
./chat/chat-deployment.yaml:               key: MYSQL_DATABASE
./chat/chat-deployment.yaml:         - name: DB_USER
./chat/chat-deployment.yaml:           valueFrom:
./chat/chat-deployment.yaml:             secretKeyRef:
./chat/chat-deployment.yaml:               name: chat-db-secret
./chat/chat-deployment.yaml:               key: MYSQL_USER
./chat/chat-deployment.yaml:         - name: DB_PASSWORD
./chat/chat-deployment.yaml:           valueFrom:
./chat/chat-deployment.yaml:             secretKeyRef:
./chat/chat-deployment.yaml:               name: chat-db-secret
./chat/chat-deployment.yaml:               key: MYSQL_PASSWORD
./chat/chat-deployment.yaml:         ports:
./chat/chat-deployment.yaml:         - containerPort: 88
./chat/chat-deployment.yaml: apiVersion: v1
./chat/chat-deployment.yaml: kind: Service
./chat/chat-deployment.yaml: metadata:
./chat/chat-deployment.yaml:   name: chat-backend
./chat/chat-deployment.yaml:   namespace: default
./chat/chat-deployment.yaml: spec:
./chat/chat-deployment.yaml:   selector:
./chat/chat-deployment.yaml:     app: chat-backend
./chat/chat-deployment.yaml:   ports:
./chat/chat-deployment.yaml:   - protocol: TCP
./chat/chat-deployment.yaml:     port: 88
./chat/chat-deployment.yaml:     targetPort: 88
./chat/chat-deployment.yaml:   type: ClusterIP
./chat/chat-deployment.yaml: apiVersion: v1
./chat/chat-deployment.yaml: kind: Service
./chat/chat-deployment.yaml: metadata:
./chat/chat-deployment.yaml:   name: chat-ws-lb
./chat/chat-deployment.yaml:   namespace: default
./chat/chat-deployment.yaml: spec:
./chat/chat-deployment.yaml:   type: LoadBalancer
./chat/chat-deployment.yaml:   selector:
./chat/chat-deployment.yaml:     app: chat-backend
./chat/chat-deployment.yaml:   ports:
./chat/chat-deployment.yaml:   - protocol: TCP
./chat/chat-deployment.yaml:     port: 88
./chat/chat-deployment.yaml:     targetPort: 88
./chat/chat-deployment.yaml:     nodePort: 88
./chat/chat-deployment.yaml: apiVersion: apps/v1
./chat/chat-deployment.yaml: kind: Deployment
./chat/chat-deployment.yaml: metadata:
./chat/chat-deployment.yaml:   name: chat-frontend
./chat/chat-deployment.yaml:   namespace: default
./chat/chat-deployment.yaml: spec:
./chat/chat-deployment.yaml:   replicas: 1
./chat/chat-deployment.yaml:   selector:
./chat/chat-deployment.yaml:     matchLabels:
./chat/chat-deployment.yaml:       app: chat-frontend
./chat/chat-deployment.yaml:   template:
./chat/chat-deployment.yaml:     metadata:
./chat/chat-deployment.yaml:       labels:
./chat/chat-deployment.yaml:         app: chat-frontend
./chat/chat-deployment.yaml:     spec:
./chat/chat-deployment.yaml:       containers:
./chat/chat-deployment.yaml:       - name: chat-frontend
./chat/chat-deployment.yaml:         image: localhost:32000/chat-frontend:latest
./chat/chat-deployment.yaml:         ports:
./chat/chat-deployment.yaml:         - containerPort: 90
./chat/chat-deployment.yaml:         volumeMounts:
./chat/chat-deployment.yaml:         - name: nginx-config
./chat/chat-deployment.yaml:           mountPath: /etc/nginx/conf.d/
./chat/chat-deployment.yaml:         env:
./chat/chat-deployment.yaml:         - name: WS_URL
./chat/chat-deployment.yaml:           value: "ws://localhost/ws"
./chat/chat-deployment.yaml:         resources:
./chat/chat-deployment.yaml:           requests:
./chat/chat-deployment.yaml:             memory: "64Mi"
./chat/chat-deployment.yaml:             cpu: "50m"
./chat/chat-deployment.yaml:           limits:
./chat/chat-deployment.yaml:             memory: "128Mi"
./chat/chat-deployment.yaml:             cpu: "100m"
./chat/chat-deployment.yaml:       volumes:
./chat/chat-deployment.yaml:       - name: nginx-config
./chat/chat-deployment.yaml:         configMap:
./chat/chat-deployment.yaml:           name: chat-nginx-conf
./chat/chat-deployment.yaml:       - name: env-config
./chat/chat-deployment.yaml:         configMap:
./chat/chat-deployment.yaml:           name: chat-frontend-env
./chat/chat-deployment.yaml: apiVersion: v1
./chat/chat-deployment.yaml: kind: Service
./chat/chat-deployment.yaml: metadata:
./chat/chat-deployment.yaml:   name: chat-frontend
./chat/chat-deployment.yaml:   namespace: default
./chat/chat-deployment.yaml: spec:
./chat/chat-deployment.yaml:   selector:
./chat/chat-deployment.yaml:     app: chat-frontend
./chat/chat-deployment.yaml:   ports:
./chat/chat-deployment.yaml:   - protocol: TCP
./chat/chat-deployment.yaml:     port: 90
./chat/chat-deployment.yaml:     targetPort: 90
./chat/chat-deployment.yaml:   type: ClusterIP
./chat/chat-deployment.yaml: apiVersion: v1
./chat/chat-deployment.yaml: kind: Service
./chat/chat-deployment.yaml: metadata:
./chat/chat-deployment.yaml:   name: chat-frontend-lb
./chat/chat-deployment.yaml:   namespace: default
./chat/chat-deployment.yaml: spec:
./chat/chat-deployment.yaml:   type: LoadBalancer
./chat/chat-deployment.yaml:   selector:
./chat/chat-deployment.yaml:     app: chat-frontend
./chat/chat-deployment.yaml:   ports:
./chat/chat-deployment.yaml:   - protocol: TCP
./chat/chat-deployment.yaml:     port: 90
./chat/chat-deployment.yaml:     targetPort: 90
./chat/chat-deployment.yaml:     nodePort: 90
./chat/chat-deployment.yaml: apiVersion: apps/v1
./chat/chat-deployment.yaml: kind: Deployment
./chat/chat-deployment.yaml: metadata:
./chat/chat-deployment.yaml:   name: mongodb
./chat/chat-deployment.yaml:   namespace: default
./chat/chat-deployment.yaml: spec:
./chat/chat-deployment.yaml:   replicas: 1
./chat/chat-deployment.yaml:   selector:
./chat/chat-deployment.yaml:     matchLabels:
./chat/chat-deployment.yaml:       app: mongodb
./chat/chat-deployment.yaml:   template:
./chat/chat-deployment.yaml:     metadata:
./chat/chat-deployment.yaml:       labels:
./chat/chat-deployment.yaml:         app: mongodb
./chat/chat-deployment.yaml:     spec:
./chat/chat-deployment.yaml:       containers:
./chat/chat-deployment.yaml:       - name: mongodb
./chat/chat-deployment.yaml:         image: localhost:32000/mongo:latest
./chat/chat-deployment.yaml:         ports:
./chat/chat-deployment.yaml:         - containerPort: 27017
./chat/chat-deployment.yaml:         volumeMounts:
./chat/chat-deployment.yaml:         - name: mongodb-data
./chat/chat-deployment.yaml:           mountPath: /data/db
./chat/chat-deployment.yaml:         resources:
./chat/chat-deployment.yaml:           requests:
./chat/chat-deployment.yaml:             memory: "256Mi"
./chat/chat-deployment.yaml:             cpu: "200m"
./chat/chat-deployment.yaml:           limits:
./chat/chat-deployment.yaml:             memory: "512Mi"
./chat/chat-deployment.yaml:             cpu: "500m"
./chat/chat-deployment.yaml:       volumes:
./chat/chat-deployment.yaml:       - name: mongodb-data
./chat/chat-deployment.yaml:         persistentVolumeClaim:
./chat/chat-deployment.yaml:           claimName: mongodb-pvc
./chat/chat-deployment.yaml: apiVersion: v1
./chat/chat-deployment.yaml: kind: Service
./chat/chat-deployment.yaml: metadata:
./chat/chat-deployment.yaml:   name: mongodb-service
./chat/chat-deployment.yaml:   namespace: default
./chat/chat-deployment.yaml: spec:
./chat/chat-deployment.yaml:   selector:
./chat/chat-deployment.yaml:     app: mongodb
./chat/chat-deployment.yaml:   ports:
./chat/chat-deployment.yaml:   - protocol: TCP
./chat/chat-deployment.yaml:     port: 27017
./chat/chat-deployment.yaml:     targetPort: 27017
./chat/chat-deployment.yaml:   type: ClusterIP
./common/allow-dns-access.yaml: apiVersion: networking.k8s.io/v1
./common/allow-dns-access.yaml: kind: NetworkPolicy
./common/allow-dns-access.yaml: metadata:
./common/allow-dns-access.yaml:   name: allow-dns-access
./common/allow-dns-access.yaml:   namespace: default
./common/allow-dns-access.yaml: spec:
./common/allow-dns-access.yaml:   podSelector: {}
./common/allow-dns-access.yaml:   policyTypes:
./common/allow-dns-access.yaml:   - Egress
./common/allow-dns-access.yaml:   egress:
./common/allow-dns-access.yaml:   - to:
./common/allow-dns-access.yaml:     - namespaceSelector:
./common/allow-dns-access.yaml:         matchLabels:
./common/allow-dns-access.yaml:           kubernetes.io/metadata.name: kube-system
./common/allow-dns-access.yaml:     ports:
./common/allow-dns-access.yaml:     - protocol: UDP
./common/allow-dns-access.yaml:       port: 53
./common/allow-dns-access.yaml:     - protocol: TCP
./common/allow-dns-access.yaml:       port: 53
./common/allow-dns-access.yaml:   - to:
./common/allow-dns-access.yaml:     - ipBlock:
./common/allow-dns-access.yaml:         cidr: 0.0.0.0/0
./common/ingress.yaml: apiVersion: networking.k8s.io/v1
./common/ingress.yaml: kind: Ingress
./common/ingress.yaml: metadata:
./common/ingress.yaml:   name: app-ingress
./common/ingress.yaml:   namespace: default
./common/ingress.yaml:   annotations:
./common/ingress.yaml:     nginx.ingress.kubernetes.io/ssl-redirect: "false"
./common/ingress.yaml:     nginx.ingress.kubernetes.io/proxy-read-timeout: "86400"
./common/ingress.yaml:     nginx.ingress.kubernetes.io/proxy-send-timeout: "86400"
./common/ingress.yaml:     nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
./common/ingress.yaml:     nginx.ingress.kubernetes.io/proxy-buffering: "off"
./common/ingress.yaml:     nginx.ingress.kubernetes.io/websocket-services: "chat-backend"
./common/ingress.yaml:     nginx.ingress.kubernetes.io/configuration-snippet: |
./common/ingress.yaml:       proxy_set_header Upgrade $http_upgrade;
./common/ingress.yaml:       proxy_set_header Connection "upgrade";
./common/ingress.yaml:     nginx.ingress.kubernetes.io/server-snippet: |
./common/ingress.yaml:       access_log /var/log/nginx/access.log;
./common/ingress.yaml:       error_log /var/log/nginx/error.log debug;
./common/ingress.yaml:     nginx.ingress.kubernetes.io/rewrite-log: "true"
./common/ingress.yaml: spec:
./common/ingress.yaml:   ingressClassName: nginx
./common/ingress.yaml:   rules:
./common/ingress.yaml:   - host: localhost
./common/ingress.yaml:     http:
./common/ingress.yaml:       paths:
./common/ingress.yaml:       - path: /ws
./common/ingress.yaml:         pathType: Prefix
./common/ingress.yaml:         backend:
./common/ingress.yaml:           service:
./common/ingress.yaml:             name: chat-backend
./common/ingress.yaml:             port:
./common/ingress.yaml:               number: 88
./common/ingress.yaml:       - path: /chat
./common/ingress.yaml:         pathType: Prefix
./common/ingress.yaml:         backend:
./common/ingress.yaml:           service:
./common/ingress.yaml:             name: chat-backend
./common/ingress.yaml:             port:
./common/ingress.yaml:               number: 88
./common/ingress.yaml:       - path: /
./common/ingress.yaml:         pathType: Prefix
./common/ingress.yaml:         backend:
./common/ingress.yaml:           service:
./common/ingress.yaml:             name: chat-frontend
./common/ingress.yaml:             port:
./common/ingress.yaml:               number: 90
./common/network-policy.yaml: apiVersion: networking.k8s.io/v1
./common/network-policy.yaml: kind: NetworkPolicy
./common/network-policy.yaml: metadata:
./common/network-policy.yaml:   name: allow-dns-access
./common/network-policy.yaml:   namespace: default
./common/network-policy.yaml: spec:
./common/network-policy.yaml:   podSelector: {}
./common/network-policy.yaml:   policyTypes:
./common/network-policy.yaml:   - Egress
./common/network-policy.yaml:   egress:
./common/network-policy.yaml:   - to:
./common/network-policy.yaml:     - namespaceSelector:
./common/network-policy.yaml:         matchLabels:
./common/network-policy.yaml:           kubernetes.io/metadata.name: kube-system
./common/network-policy.yaml:     ports:
./common/network-policy.yaml:     - protocol: UDP
./common/network-policy.yaml:       port: 53
./common/network-policy.yaml:     - protocol: TCP
./common/network-policy.yaml:       port: 53
./common/network-policy.yaml:   - to:
./common/network-policy.yaml:     - ipBlock:
./common/network-policy.yaml:         cidr: 0.0.0.0/0
./common/network-policy.yaml: apiVersion: networking.k8s.io/v1
./common/network-policy.yaml: kind: NetworkPolicy
./common/network-policy.yaml: metadata:
./common/network-policy.yaml:   name: allow-chat-ws-traffic
./common/network-policy.yaml:   namespace: default
./common/network-policy.yaml: spec:
./common/network-policy.yaml:   podSelector:
./common/network-policy.yaml:     matchLabels:
./common/network-policy.yaml:       app: chat-frontend
./common/network-policy.yaml:   policyTypes:
./common/network-policy.yaml:   - Egress
./common/network-policy.yaml:   egress:
./common/network-policy.yaml:   - to:
./common/network-policy.yaml:     - podSelector:
./common/network-policy.yaml:         matchLabels:
./common/network-policy.yaml:           app: chat-backend
./common/network-policy.yaml:     ports:
./common/network-policy.yaml:     - protocol: TCP
./common/network-policy.yaml:       port: 88
./common/autoscaler.yaml: apiVersion: autoscaling/v2
./common/autoscaler.yaml: kind: HorizontalPodAutoscaler
./common/autoscaler.yaml: metadata:
./common/autoscaler.yaml:   name: cms-hpa
./common/autoscaler.yaml:   namespace: default
./common/autoscaler.yaml: spec:
./common/autoscaler.yaml:   scaleTargetRef:
./common/autoscaler.yaml:     apiVersion: apps/v1
./common/autoscaler.yaml:     kind: Deployment
./common/autoscaler.yaml:     name: cms-deployment
./common/autoscaler.yaml:   minReplicas: 2
./common/autoscaler.yaml:   maxReplicas: 4
./common/autoscaler.yaml:   metrics:
./common/autoscaler.yaml:   - type: Resource
./common/autoscaler.yaml:     resource:
./common/autoscaler.yaml:       name: cpu
./common/autoscaler.yaml:       target:
./common/autoscaler.yaml:         type: Utilization
./common/autoscaler.yaml:         averageUtilization: 30
./common/autoscaler.yaml: apiVersion: autoscaling/v2
./common/autoscaler.yaml: kind: HorizontalPodAutoscaler
./common/autoscaler.yaml: metadata:
./common/autoscaler.yaml:   name: chat-backend-hpa
./common/autoscaler.yaml:   namespace: default
./common/autoscaler.yaml: spec:
./common/autoscaler.yaml:   scaleTargetRef:
./common/autoscaler.yaml:     apiVersion: apps/v1
./common/autoscaler.yaml:     kind: Deployment
./common/autoscaler.yaml:     name: chat-backend
./common/autoscaler.yaml:   minReplicas: 2
./common/autoscaler.yaml:   maxReplicas: 4
./common/autoscaler.yaml:   metrics:
./common/autoscaler.yaml:   - type: Resource
./common/autoscaler.yaml:     resource:
./common/autoscaler.yaml:       name: cpu
./common/autoscaler.yaml:       target:
./common/autoscaler.yaml:         type: Utilization
./common/autoscaler.yaml:         averageUtilization: 30
./common/autoscaler.yaml: apiVersion: autoscaling/v2
./common/autoscaler.yaml: kind: HorizontalPodAutoscaler
./common/autoscaler.yaml: metadata:
./common/autoscaler.yaml:   name: ai-backend-hpa
./common/autoscaler.yaml:   namespace: default
./common/autoscaler.yaml: spec:
./common/autoscaler.yaml:   scaleTargetRef:
./common/autoscaler.yaml:     apiVersion: apps/v1
./common/autoscaler.yaml:     kind: Deployment
./common/autoscaler.yaml:     name: ai-backend
./common/autoscaler.yaml:   minReplicas: 1
./common/autoscaler.yaml:   maxReplicas: 3
./common/autoscaler.yaml:   metrics:
./common/autoscaler.yaml:   - type: Resource
./common/autoscaler.yaml:     resource:
./common/autoscaler.yaml:       name: cpu
./common/autoscaler.yaml:       target:
./common/autoscaler.yaml:         type: Utilization
./common/autoscaler.yaml:         averageUtilization: 30
./ai/ai-app-deployment.yaml: apiVersion: v1
./ai/ai-app-deployment.yaml: kind: PersistentVolumeClaim
./ai/ai-app-deployment.yaml: metadata:
./ai/ai-app-deployment.yaml:   name: ai-uploads-pvc
./ai/ai-app-deployment.yaml:   namespace: default
./ai/ai-app-deployment.yaml: spec:
./ai/ai-app-deployment.yaml:   accessModes:
./ai/ai-app-deployment.yaml:     - ReadWriteOnce
./ai/ai-app-deployment.yaml:   resources:
./ai/ai-app-deployment.yaml:     requests:
./ai/ai-app-deployment.yaml:       storage: 1Gi
./ai/ai-app-deployment.yaml:   storageClassName: microk8s-hostpath
./ai/ai-app-deployment.yaml: apiVersion: v1
./ai/ai-app-deployment.yaml: kind: ConfigMap
./ai/ai-app-deployment.yaml: metadata:
./ai/ai-app-deployment.yaml:   name: ai-nginx-conf
./ai/ai-app-deployment.yaml:   namespace: default
./ai/ai-app-deployment.yaml: data:
./ai/ai-app-deployment.yaml:   default.conf: |
./ai/ai-app-deployment.yaml:     server {
./ai/ai-app-deployment.yaml:         listen       91;
./ai/ai-app-deployment.yaml:         listen  [::]:91;
./ai/ai-app-deployment.yaml:         server_name  localhost;
./ai/ai-app-deployment.yaml:         error_log  /var/log/nginx/error.log debug;
./ai/ai-app-deployment.yaml:         access_log /var/log/nginx/access.log combined;
./ai/ai-app-deployment.yaml:         location / {
./ai/ai-app-deployment.yaml:             root   /usr/share/nginx/html;
./ai/ai-app-deployment.yaml:             index  index.html index.htm;
./ai/ai-app-deployment.yaml:             try_files $uri $uri/ /index.html;
./ai/ai-app-deployment.yaml:         }
./ai/ai-app-deployment.yaml:         location /ai-service/api/ {
./ai/ai-app-deployment.yaml:             rewrite ^/ai-service(/api/.*)$ $1 break;
./ai/ai-app-deployment.yaml:             proxy_pass http://ai-backend.default.svc.cluster.local:89;
./ai/ai-app-deployment.yaml:             proxy_http_version 1.1;
./ai/ai-app-deployment.yaml:             proxy_set_header Host $host;
./ai/ai-app-deployment.yaml:             proxy_set_header X-Real-IP $remote_addr;
./ai/ai-app-deployment.yaml:             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
./ai/ai-app-deployment.yaml:             add_header X-Debug-Original-URI $request_uri always;
./ai/ai-app-deployment.yaml:             add_header X-Debug-Rewritten-URI $uri always;
./ai/ai-app-deployment.yaml:         }
./ai/ai-app-deployment.yaml:         error_page   500 502 503 504  /50x.html;
./ai/ai-app-deployment.yaml:         location = /50x.html {
./ai/ai-app-deployment.yaml:             root   /usr/share/nginx/html;
./ai/ai-app-deployment.yaml:         }
./ai/ai-app-deployment.yaml:     }
./ai/ai-app-deployment.yaml: apiVersion: v1
./ai/ai-app-deployment.yaml: kind: Secret
./ai/ai-app-deployment.yaml: metadata:
./ai/ai-app-deployment.yaml:   name: azure-secret
./ai/ai-app-deployment.yaml:   namespace: default
./ai/ai-app-deployment.yaml: type: Opaque
./ai/ai-app-deployment.yaml: stringData:
./ai/ai-app-deployment.yaml:   AZURE_STORAGE_CONNECTION_STRING: "DefaultEndpointsProtocol=https;AccountName=mystorageaccount;AccountKey=mykey;EndpointSuffix=core.windows.net"
./ai/ai-app-deployment.yaml:   AZURE_SQL_CONNECTION_STRING: "Server=tcp:myserver.database.windows.net,1433;Initial Catalog=mydb;Persist Security Info=False;User ID=myadmin;Password=mypassword;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
./ai/ai-app-deployment.yaml:   AZURE_ENTITY_EXTRACTION_KEY: "my-entity-extraction-key"
./ai/ai-app-deployment.yaml:   AZURE_ENTITY_EXTRACTION_ENDPOINT: "https://my-entity-extraction.cognitiveservices.azure.com/"
./ai/ai-app-deployment.yaml: apiVersion: apps/v1
./ai/ai-app-deployment.yaml: kind: Deployment
./ai/ai-app-deployment.yaml: metadata:
./ai/ai-app-deployment.yaml:   name: ai-backend
./ai/ai-app-deployment.yaml:   namespace: default
./ai/ai-app-deployment.yaml: spec:
./ai/ai-app-deployment.yaml:   replicas: 1
./ai/ai-app-deployment.yaml:   selector:
./ai/ai-app-deployment.yaml:     matchLabels:
./ai/ai-app-deployment.yaml:       app: ai-backend
./ai/ai-app-deployment.yaml:   template:
./ai/ai-app-deployment.yaml:     metadata:
./ai/ai-app-deployment.yaml:       labels:
./ai/ai-app-deployment.yaml:         app: ai-backend
./ai/ai-app-deployment.yaml:     spec:
./ai/ai-app-deployment.yaml:       affinity:
./ai/ai-app-deployment.yaml:         podAntiAffinity:
./ai/ai-app-deployment.yaml:           preferredDuringSchedulingIgnoredDuringExecution:
./ai/ai-app-deployment.yaml:           - weight: 100
./ai/ai-app-deployment.yaml:             podAffinityTerm:
./ai/ai-app-deployment.yaml:               labelSelector:
./ai/ai-app-deployment.yaml:                 matchExpressions:
./ai/ai-app-deployment.yaml:                 - key: app
./ai/ai-app-deployment.yaml:                   operator: In
./ai/ai-app-deployment.yaml:                   values:
./ai/ai-app-deployment.yaml:                   - ai-backend
./ai/ai-app-deployment.yaml:               topologyKey: kubernetes.io/hostname
./ai/ai-app-deployment.yaml:       containers:
./ai/ai-app-deployment.yaml:       - name: backend
./ai/ai-app-deployment.yaml:         image: localhost:32000/ai-backend:latest
./ai/ai-app-deployment.yaml:         ports:
./ai/ai-app-deployment.yaml:         - containerPort: 89
./ai/ai-app-deployment.yaml:         env:
./ai/ai-app-deployment.yaml:         - name: AZURE_STORAGE_CONNECTION_STRING
./ai/ai-app-deployment.yaml:           valueFrom:
./ai/ai-app-deployment.yaml:             secretKeyRef:
./ai/ai-app-deployment.yaml:               name: azure-secret
./ai/ai-app-deployment.yaml:               key: AZURE_STORAGE_CONNECTION_STRING
./ai/ai-app-deployment.yaml:         - name: AZURE_SQL_CONNECTION_STRING
./ai/ai-app-deployment.yaml:           valueFrom:
./ai/ai-app-deployment.yaml:             secretKeyRef:
./ai/ai-app-deployment.yaml:               name: azure-secret
./ai/ai-app-deployment.yaml:               key: AZURE_SQL_CONNECTION_STRING
./ai/ai-app-deployment.yaml:         - name: AZURE_ENTITY_EXTRACTION_KEY
./ai/ai-app-deployment.yaml:           valueFrom:
./ai/ai-app-deployment.yaml:             secretKeyRef:
./ai/ai-app-deployment.yaml:               name: azure-secret
./ai/ai-app-deployment.yaml:               key: AZURE_ENTITY_EXTRACTION_KEY
./ai/ai-app-deployment.yaml:         - name: AZURE_ENTITY_EXTRACTION_ENDPOINT
./ai/ai-app-deployment.yaml:           valueFrom:
./ai/ai-app-deployment.yaml:             secretKeyRef:
./ai/ai-app-deployment.yaml:               name: azure-secret
./ai/ai-app-deployment.yaml:               key: AZURE_ENTITY_EXTRACTION_ENDPOINT
./ai/ai-app-deployment.yaml:         - name: PORT
./ai/ai-app-deployment.yaml:           value: "89"
./ai/ai-app-deployment.yaml:         - name: NODE_ENV
./ai/ai-app-deployment.yaml:           value: "production"
./ai/ai-app-deployment.yaml:         resources:
./ai/ai-app-deployment.yaml:           requests:
./ai/ai-app-deployment.yaml:             memory: "256Mi"
./ai/ai-app-deployment.yaml:             cpu: "100m"
./ai/ai-app-deployment.yaml:           limits:
./ai/ai-app-deployment.yaml:             memory: "512Mi"
./ai/ai-app-deployment.yaml:             cpu: "500m"
./ai/ai-app-deployment.yaml:         volumeMounts:
./ai/ai-app-deployment.yaml:         - name: uploads
./ai/ai-app-deployment.yaml:           mountPath: /app/uploads
./ai/ai-app-deployment.yaml:         readinessProbe:
./ai/ai-app-deployment.yaml:           httpGet:
./ai/ai-app-deployment.yaml:             path: /api/health
./ai/ai-app-deployment.yaml:             port: 89
./ai/ai-app-deployment.yaml:           initialDelaySeconds: 10
./ai/ai-app-deployment.yaml:           periodSeconds: 10
./ai/ai-app-deployment.yaml:           timeoutSeconds: 5
./ai/ai-app-deployment.yaml:         livenessProbe:
./ai/ai-app-deployment.yaml:           httpGet:
./ai/ai-app-deployment.yaml:             path: /api/health
./ai/ai-app-deployment.yaml:             port: 89
./ai/ai-app-deployment.yaml:           initialDelaySeconds: 15
./ai/ai-app-deployment.yaml:           periodSeconds: 10
./ai/ai-app-deployment.yaml:           timeoutSeconds: 5
./ai/ai-app-deployment.yaml:       volumes:
./ai/ai-app-deployment.yaml:       - name: uploads
./ai/ai-app-deployment.yaml:         persistentVolumeClaim:
./ai/ai-app-deployment.yaml:           claimName: ai-uploads-pvc
./ai/ai-app-deployment.yaml: apiVersion: v1
./ai/ai-app-deployment.yaml: kind: Service
./ai/ai-app-deployment.yaml: metadata:
./ai/ai-app-deployment.yaml:   name: ai-backend
./ai/ai-app-deployment.yaml:   namespace: default
./ai/ai-app-deployment.yaml: spec:
./ai/ai-app-deployment.yaml:   selector:
./ai/ai-app-deployment.yaml:     app: ai-backend
./ai/ai-app-deployment.yaml:   ports:
./ai/ai-app-deployment.yaml:   - protocol: TCP
./ai/ai-app-deployment.yaml:     port: 89
./ai/ai-app-deployment.yaml:     targetPort: 89
./ai/ai-app-deployment.yaml:   type: ClusterIP
./ai/ai-app-deployment.yaml: apiVersion: apps/v1
./ai/ai-app-deployment.yaml: kind: Deployment
./ai/ai-app-deployment.yaml: metadata:
./ai/ai-app-deployment.yaml:   name: ai-frontend
./ai/ai-app-deployment.yaml:   namespace: default
./ai/ai-app-deployment.yaml: spec:
./ai/ai-app-deployment.yaml:   replicas: 1
./ai/ai-app-deployment.yaml:   selector:
./ai/ai-app-deployment.yaml:     matchLabels:
./ai/ai-app-deployment.yaml:       app: ai-frontend
./ai/ai-app-deployment.yaml:   template:
./ai/ai-app-deployment.yaml:     metadata:
./ai/ai-app-deployment.yaml:       labels:
./ai/ai-app-deployment.yaml:         app: ai-frontend
./ai/ai-app-deployment.yaml:     spec:
./ai/ai-app-deployment.yaml:       containers:
./ai/ai-app-deployment.yaml:       - name: frontend
./ai/ai-app-deployment.yaml:         image: localhost:32000/ai-app:latest
./ai/ai-app-deployment.yaml:         ports:
./ai/ai-app-deployment.yaml:         - containerPort: 91
./ai/ai-app-deployment.yaml:         volumeMounts:
./ai/ai-app-deployment.yaml:         - name: nginx-config
./ai/ai-app-deployment.yaml:           mountPath: /etc/nginx/conf.d/
./ai/ai-app-deployment.yaml:         env:
./ai/ai-app-deployment.yaml:         - name: API_URL
./ai/ai-app-deployment.yaml:           value: "http://ai-backend:89/api"
./ai/ai-app-deployment.yaml:         resources:
./ai/ai-app-deployment.yaml:           requests:
./ai/ai-app-deployment.yaml:             memory: "128Mi"
./ai/ai-app-deployment.yaml:             cpu: "100m"
./ai/ai-app-deployment.yaml:           limits:
./ai/ai-app-deployment.yaml:             memory: "256Mi"
./ai/ai-app-deployment.yaml:             cpu: "200m"
./ai/ai-app-deployment.yaml:         readinessProbe:
./ai/ai-app-deployment.yaml:           httpGet:
./ai/ai-app-deployment.yaml:             path: /
./ai/ai-app-deployment.yaml:             port: 91
./ai/ai-app-deployment.yaml:           initialDelaySeconds: 10
./ai/ai-app-deployment.yaml:           periodSeconds: 10
./ai/ai-app-deployment.yaml:           timeoutSeconds: 5
./ai/ai-app-deployment.yaml:         livenessProbe:
./ai/ai-app-deployment.yaml:           httpGet:
./ai/ai-app-deployment.yaml:             path: /
./ai/ai-app-deployment.yaml:             port: 91
./ai/ai-app-deployment.yaml:           initialDelaySeconds: 15
./ai/ai-app-deployment.yaml:           periodSeconds: 10
./ai/ai-app-deployment.yaml:           timeoutSeconds: 5
./ai/ai-app-deployment.yaml:       volumes:
./ai/ai-app-deployment.yaml:       - name: nginx-config
./ai/ai-app-deployment.yaml:         configMap:
./ai/ai-app-deployment.yaml:           name: ai-nginx-conf
./ai/ai-app-deployment.yaml: apiVersion: v1
./ai/ai-app-deployment.yaml: kind: Service
./ai/ai-app-deployment.yaml: metadata:
./ai/ai-app-deployment.yaml:   name: ai-frontend
./ai/ai-app-deployment.yaml:   namespace: default
./ai/ai-app-deployment.yaml: spec:
./ai/ai-app-deployment.yaml:   selector:
./ai/ai-app-deployment.yaml:     app: ai-frontend
./ai/ai-app-deployment.yaml:   ports:
./ai/ai-app-deployment.yaml:   - protocol: TCP
./ai/ai-app-deployment.yaml:     port: 91
./ai/ai-app-deployment.yaml:     targetPort: 91
./ai/ai-app-deployment.yaml:   type: ClusterIP
./ai/ai-app-deployment.yaml: apiVersion: v1
./ai/ai-app-deployment.yaml: kind: Service
./ai/ai-app-deployment.yaml: metadata:
./ai/ai-app-deployment.yaml:   name: ai-frontend-lb
./ai/ai-app-deployment.yaml:   namespace: default
./ai/ai-app-deployment.yaml: spec:
./ai/ai-app-deployment.yaml:   type: LoadBalancer
./ai/ai-app-deployment.yaml:   selector:
./ai/ai-app-deployment.yaml:     app: ai-frontend
./ai/ai-app-deployment.yaml:   ports:
./ai/ai-app-deployment.yaml:   - protocol: TCP
./ai/ai-app-deployment.yaml:     port: 91
./ai/ai-app-deployment.yaml:     targetPort: 91
./ai/ai-app-deployment.yaml:     nodePort: 91
./scripts/deploy-all.sh: #!/bin/bash
./scripts/deploy-all.sh: set -e
./scripts/deploy-all.sh: # Colors for output
./scripts/deploy-all.sh: GREEN='\033[0;32m'
./scripts/deploy-all.sh: BLUE='\033[0;34m'
./scripts/deploy-all.sh: RED='\033[0;31m'
./scripts/deploy-all.sh: YELLOW='\033[1;33m'
./scripts/deploy-all.sh: NC='\033[0m' # No Color
./scripts/deploy-all.sh: echo -e "${BLUE}========== Deploying All Kubernetes Resources ==========${NC}"
./scripts/deploy-all.sh: # Get current directory
./scripts/deploy-all.sh: CURRENT_DIR=$(pwd)
./scripts/deploy-all.sh: BASE_DIR=$(basename "$CURRENT_DIR")
./scripts/deploy-all.sh: K8S_DIR=".."
./scripts/deploy-all.sh: echo -e "${GREEN}Using kubernetes directory: $K8S_DIR${NC}"
./scripts/deploy-all.sh: # Set the kubectl command to use microk8s kubectl directly
./scripts/deploy-all.sh: KUBECTL="microk8s kubectl"
./scripts/deploy-all.sh: echo -e "${BLUE}Using command: $KUBECTL${NC}"
./scripts/deploy-all.sh: # Apply resources in the correct order
./scripts/deploy-all.sh: echo -e "${BLUE}Applying all resources in the correct order...${NC}"
./scripts/deploy-all.sh: # 1. Apply secrets
./scripts/deploy-all.sh: echo -e "${BLUE}1. Applying secrets...${NC}"
./scripts/deploy-all.sh: $KUBECTL apply -f $K8S_DIR/azure-secret.yaml
./scripts/deploy-all.sh: echo -e "${GREEN}Secrets applied successfully${NC}"
./scripts/deploy-all.sh: # 2. Apply common resources
./scripts/deploy-all.sh: echo -e "${BLUE}2. Applying common resources...${NC}"
./scripts/deploy-all.sh: $KUBECTL apply -f $K8S_DIR/common/
./scripts/deploy-all.sh: echo -e "${GREEN}Common resources applied successfully${NC}"
./scripts/deploy-all.sh: # 3. Apply CMS deployment
./scripts/deploy-all.sh: echo -e "${BLUE}3. Applying CMS deployment...${NC}"
./scripts/deploy-all.sh: $KUBECTL apply -f $K8S_DIR/cms/
./scripts/deploy-all.sh: echo -e "${GREEN}CMS deployment applied successfully${NC}"
./scripts/deploy-all.sh: # 4. Apply Chat deployment
./scripts/deploy-all.sh: echo -e "${BLUE}4. Applying Chat deployment...${NC}"
./scripts/deploy-all.sh: $KUBECTL apply -f $K8S_DIR/chat/
./scripts/deploy-all.sh: echo -e "${GREEN}Chat deployment applied successfully${NC}"
./scripts/deploy-all.sh: # 5. Apply AI deployment
./scripts/deploy-all.sh: echo -e "${BLUE}5. Applying AI deployment...${NC}"
./scripts/deploy-all.sh: $KUBECTL apply -f $K8S_DIR/ai/ai-app-deployment.yaml
./scripts/deploy-all.sh: echo -e "${GREEN}AI deployment applied successfully${NC}"
./scripts/deploy-all.sh: # Wait for deployments to be ready
./scripts/deploy-all.sh: echo -e "${BLUE}Waiting for deployments to become ready...${NC}"
./scripts/deploy-all.sh: $KUBECTL get deployments | grep -v NAME | awk '{print $1}' | xargs -I{} $KUBECTL rollout status deployment/{} || true
./scripts/deploy-all.sh: # Check deployment status
./scripts/deploy-all.sh: echo -e "${BLUE}Checking deployment status...${NC}"
./scripts/deploy-all.sh: $KUBECTL get pods -o wide
./scripts/deploy-all.sh: # Display services
./scripts/deploy-all.sh: echo -e "${BLUE}Available services:${NC}"
./scripts/deploy-all.sh: $KUBECTL get svc
./scripts/deploy-all.sh: # Display ingress
./scripts/deploy-all.sh: echo -e "${BLUE}Ingress status:${NC}"
./scripts/deploy-all.sh: $KUBECTL get ingress
./scripts/deploy-all.sh: # Display HPAs
./scripts/deploy-all.sh: echo -e "${BLUE}Horizontal Pod Autoscalers:${NC}"
./scripts/deploy-all.sh: $KUBECTL get hpa
./scripts/deploy-all.sh: # Dashboard access instruction
./scripts/deploy-all.sh: echo -e "${GREEN}==========================================================${NC}"
./scripts/deploy-all.sh: echo -e "${GREEN}All resources applied successfully!${NC}"
./scripts/deploy-all.sh: echo -e "${GREEN}==========================================================${NC}"
./scripts/deploy-all.sh: echo -e "${YELLOW}You can access the dashboard with:${NC}"
./scripts/deploy-all.sh: echo -e "${YELLOW}  microk8s dashboard-proxy${NC}"
./scripts/deploy-all.sh: echo -e "${YELLOW}Your application should be accessible at:${NC}"
./scripts/deploy-all.sh: echo -e "${YELLOW}  http://52.172.213.33/${NC}"
./scripts/deploy-all.sh: echo -e "${GREEN}==========================================================${NC}"
./scripts/deploy-all.sh: # Ask if user wants to monitor deployment
./scripts/deploy-all.sh: read -p "Do you want to monitor the deployment? (y/n): " MONITOR
./scripts/deploy-all.sh: if [[ "$MONITOR" == "y" || "$MONITOR" == "Y" ]]; then
./scripts/deploy-all.sh:     echo -e "${BLUE}Monitoring deployment (press Ctrl+C to exit)...${NC}"
./scripts/deploy-all.sh:     $KUBECTL get pods -w
./scripts/deploy-all.sh: else
./scripts/deploy-all.sh:     echo -e "${GREEN}Deployment complete!${NC}"
./scripts/image-push.sh: #!/bin/bash
./scripts/image-push.sh: set -e
./scripts/image-push.sh: # Colors for output
./scripts/image-push.sh: GREEN='\033[0;32m'
./scripts/image-push.sh: BLUE='\033[0;34m'
./scripts/image-push.sh: RED='\033[0;31m'
./scripts/image-push.sh: NC='\033[0m' # No Color
./scripts/image-push.sh: echo -e "${BLUE}===== Pushing Images to Microk8s Registry (localhost:32000) =====${NC}"
./scripts/image-push.sh: # List of images to build and push
./scripts/image-push.sh: IMAGES=(
./scripts/image-push.sh:   "vvveb-cms"
./scripts/image-push.sh:   "chat-backend"
./scripts/image-push.sh:   "chat-frontend"
./scripts/image-push.sh:   "ai-backend"
./scripts/image-push.sh:   "ai-app"
./scripts/image-push.sh: # Function to build and push
./scripts/image-push.sh: build_and_push() {
./scripts/image-push.sh:   local image_name=$1
./scripts/image-push.sh:   local app_dir=$2
./scripts/image-push.sh:   local dockerfile=$3
./scripts/image-push.sh:   echo -e "${BLUE}Processing image: ${image_name}${NC}"
./scripts/image-push.sh:   echo -e "  - Building ${image_name}..."
./scripts/image-push.sh:   docker build -t localhost:32000/${image_name}:latest -f "${dockerfile}" "${app_dir}"
./scripts/image-push.sh:   echo -e "  - Pushing to localhost:32000/${image_name}..."
./scripts/image-push.sh:   docker push localhost:32000/${image_name}:latest
./scripts/image-push.sh:   echo -e "${GREEN}Successfully processed ${image_name}${NC}"
./scripts/image-push.sh:   echo ""
./scripts/image-push.sh: # Build and push application images
./scripts/image-push.sh: REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
./scripts/image-push.sh: build_and_push "vvveb-cms" "$REPO_ROOT/cms" "$REPO_ROOT/cms/Dockerfile"
./scripts/image-push.sh: build_and_push "chat-backend" "$REPO_ROOT/chat/backend" "$REPO_ROOT/chat/backend/Dockerfile"
./scripts/image-push.sh: build_and_push "chat-frontend" "$REPO_ROOT/chat/frontend" "$REPO_ROOT/chat/frontend/Dockerfile"
./scripts/image-push.sh: build_and_push "ai-app" "$REPO_ROOT/ai-app" "$REPO_ROOT/ai-app/Dockerfile"
./scripts/image-push.sh: # Push standard images
./scripts/image-push.sh: STANDARD_IMAGES=(
./scripts/image-push.sh:   "mongo"
./scripts/image-push.sh:   "mysql:latest"
./scripts/image-push.sh: for image in "${STANDARD_IMAGES[@]}"; do
./scripts/image-push.sh:   echo -e "${BLUE}Processing standard image: ${image}${NC}"
./scripts/image-push.sh:   if [[ $image == *":"* ]]; then
./scripts/image-push.sh:     base_image="${image%:*}"
./scripts/image-push.sh:     tag="${image#*:}"
./scripts/image-push.sh:     echo -e "  - Pulling ${image}..."
./scripts/image-push.sh:     docker pull ${image}
./scripts/image-push.sh:     echo -e "  - Tagging for localhost:32000..."
./scripts/image-push.sh:     docker tag ${image} localhost:32000/${base_image}:${tag}
./scripts/image-push.sh:     echo -e "  - Pushing to localhost:32000/${base_image}:${tag}..."
./scripts/image-push.sh:     docker push localhost:32000/${base_image}:${tag}
./scripts/image-push.sh:   else
./scripts/image-push.sh:     echo -e "  - Pulling ${image}..."
./scripts/image-push.sh:     docker pull ${image}
./scripts/image-push.sh:     echo -e "  - Tagging for localhost:32000..."
./scripts/image-push.sh:     docker tag ${image} localhost:32000/${image}
./scripts/image-push.sh:     echo -e "  - Pushing to localhost:32000/${image}..."
./scripts/image-push.sh:     docker push localhost:32000/${image}
./scripts/image-push.sh:   fi
./scripts/image-push.sh:   echo -e "${GREEN}Successfully processed ${image}${NC}"
./scripts/image-push.sh:   echo ""
./scripts/image-push.sh: done
./scripts/image-push.sh: echo -e "${BLUE}Verifying registry content...${NC}"
./scripts/image-push.sh: curl localhost:32000/v2/_catalog
./scripts/image-push.sh: echo -e "${GREEN}===== Image Push Complete =====${NC}"
